openapi: 3.0.0
info:
  title: Course Website API
  version: 1.0.0
paths:
  /api/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Email already registered.
  /api/login:
    post:
      summary: Login and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
                  role:
                    type: string
        '401':
          description: Invalid credentials.
  /api/courses:
    get:
      summary: Get list of courses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of courses.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    description:
                      type: string
        '401':
          description: Unauthorized.
  /api/course/{course_id}:
    get:
      summary: Get course details
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course details.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Course not found.
        '401':
          description: Unauthorized.
  /api/teacher/upload-assignment:
    post:
      summary: Upload an assignment (teacher only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                due_date:
                  type: string
                  format: date-time
                course_id:
                  type: string
                content:
                  type: object
      responses:
        '200':
          description: Assignment uploaded successfully.
        '400':
          description: Missing required fields.
        '403':
          description: Unauthorized.
        '404':
          description: Course not found.
  /api/teacher/view-submissions:
    get:
      summary: View submissions (teacher only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Submissions list.
        '403':
          description: Unauthorized.
  /api/teacher/upload-lecture:
    post:
      summary: Upload a lecture (teacher only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                course_id:
                  type: string
                video_link:
                  type: string
      responses:
        '200':
          description: Lecture uploaded successfully.
        '400':
          description: Missing required fields.
        '403':
          description: Unauthorized.
        '404':
          description: Course not found.
  /api/rag/add_document:
    post:
      summary: Add a document to RAG database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                id:
                  type: string
      responses:
        '200':
          description: Document added.
        '400':
          description: Missing text or id.
  /api/rag/query:
    post:
      summary: Query the RAG system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Query results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                  answer:
                    type: string
                  sources:
                    type: array
                    items:
                      type: string
        '400':
          description: Missing query.
  /api/llm/query:
    post:
      summary: Query the LLM directly
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Query results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                  answer:
                    type: string
        '400':
          description: Missing query.
  /api/health:
    get:
      summary: Health check
      responses:
        '200':
          description: Health status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /static/{filename}:
    get:
      summary: Serve static files
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Static file.